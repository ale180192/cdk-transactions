# Generated by Django 3.2 on 2022-04-12 04:49
import csv
import os
import pytz
from pathlib import Path
from datetime import datetime
from django.db import migrations
from uuid import uuid4

def insert_companies(apps, schema_editor):
    Company = apps.get_model("transact", "Company")
    Transaction = apps.get_model("transact", "Transaction")
    base_dir = Path(__file__).resolve().parent
    filename = os.path.join(base_dir, "test_database.csv")

    rows = []
    
    with open(filename, 'r') as csvfile:
        csvreader = csv.reader(csvfile)
        next(csvreader)
        for row in csvreader:
            if not row[0]:
                continue
            row[0] = row[0].title()
            rows.append(row)
    
    companies_unique = [row[0] for row in rows]
    companies_unique = set(companies_unique)
    companies_obj = [Company(id=uuid4(), name=name, status=True) for name in companies_unique]
    Company.objects.bulk_create(companies_obj)
        
    transactions_obj = []
    for company in companies_obj:
        for row in rows:
            if row[0] == company.name:
                created_at = row[2][:-3]
                tz = pytz.timezone("America/Mexico_City")
                try:
                    created_at = datetime \
                        .strptime(created_at, "%Y-%m-%d %H:%M:%S.%f") \
                        .replace(tzinfo=tz)
                except:
                    created_at = datetime \
                        .strptime(created_at, "%Y-%m-%d %H:%M:%S") \
                        .replace(tzinfo=tz)

                transaction_obj = Transaction(
                    id=uuid4(),
                    company=company,
                    price=row[1],
                    status=row[3].upper(),
                    approved=True if row[4] == "true" else False,
                    created_at=created_at,
                    charged = True if (row[4] == "true" and row[3] == "closed") else False
                )
                transactions_obj.append(transaction_obj)
    
    Transaction.objects.bulk_create(transactions_obj)

class Migration(migrations.Migration):

    dependencies = [
        ('transact', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(insert_companies, migrations.RunPython.noop),
    ]
